//First Fit Algorithm

#include<stdio.h>
#define MAX_BLOCKS 100 #define
MAX_PROCESSES 100
int main() { //
Declare Variables
int nb, blockSize[MAX_BLOCKS] = {0}, n, jobSize[MAX_PROCESSES] = {0}, i, j,
alloc[MAX_PROCESSES] = {0};
// Input initial values
printf("Enter the number of available memory blocks: ");
scanf("%d", &nb); if (nb > MAX_BLOCKS || nb <= 0)
{ printf("Invalid number of blocks. Exiting...\n"); return
1; }
printf("Enter the size of each memory block: \n");
for (i = 0; i < nb; i++) { printf("Size
of block%d: ", i + 1); scanf("%d",
&blockSize[i]);
}
printf("Enter the number of processes: "); scanf("%d",
&n);
if (n > MAX_PROCESSES || n <= 0) {
printf("Invalid number of processes. Exiting...\n");
return 1; }
printf("Enter the size of each process: \n");
for (i = 0; i < n; i++) { printf("Size
of process%d: ", i + 1);
scanf("%d", &jobSize[i]);
}
for (i = 0; i < n; i++) { alloc[i]
= -1;
}
// Allocate the processes
for (i = 0; i < n; i++) { for
(j = 0; j < nb; j++) {
if (blockSize[j] >= jobSize[i] && alloc[i] == -1) {
alloc[i] = j;blockSize[j] = 0; // Set the block size to 0 after allocation break;
// Exit the inner loop once a block is allocated
}
}
}
// Print the results
printf("Process P of {size} is allocated to block \n");
for (i = 0; i < n; i++) { if
(alloc[i] != -1)
printf("Process %d of %d --> Block %d\n", i + 1, jobSize[i], alloc[i] + 1);
else
printf("Process %d of %d --> is not allocated \n", i + 1, jobSize[i]);
} return
0;
}